CCS PCD C Compiler, Version 5.007, 61971               03-Eyl-21 21:13

               Filename:   G:\GithubProje\PIC\GPS\main.lst

               ROM used:   1402 bytes (1%)
                           Largest free fragment is 65536
               RAM used:   828 (3%) at main() level
                           851 (3%) worst case
               Stack used: 14 locations
               Stack size: 128

*
00000:  GOTO    4D6
*
0002A:  DATA    00,02,00
.................... #include <main.h> 
.................... #include <33EP256MU810.h> 
.................... //////// Standard Header file for the DSPIC33EP256MU810 device //////////////// 
.................... #device DSPIC33EP256MU810 
....................  
.................... #list 
....................  
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES CKSFSM                   //Clock Switching is enabled, fail Safe clock monitor is enabled 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOJTAG                   //JTAG disabled 
....................  
.................... #device ICSP=1 
.................... #use delay(clock=96MHz,crystal=24MHz) 
.................... #pin_select U1TX=PIN_D1 
.................... #pin_select U1RX=PIN_D13 
.................... #use rs232(UART1, baud=9600, stream=GPS) 
....................  
....................  
.................... int8 GPSValues[500]; 
.................... int1 locationFound=0; 
.................... int8 GprMcArray[150]; 
.................... int8 latitude[10]; 
.................... int8 longitude[10]; 
.................... int1 dataCameGPS=0; 
....................  
.................... #include "GPS.c" 
....................  
.................... char Hours[11]; 
....................  
.................... int gprmc=0; 
.................... int cntGprMc=0; 
.................... int satelliteNum=0; 
....................  
.................... float altitudeValue=0.0; 
.................... char satellite[2]; 
.................... char altitude[6]; 
....................  
.................... int1 valid=false; 
.................... int1 findValue=false; 
....................  
.................... void GPSInit() 
.................... { 
....................    enable_interrupts(INT_RDA); 
....................    enable_interrupts(INTR_GLOBAL); 
....................     
.................... } 
....................  
.................... void GPSDeInit() 
.................... { 
....................    disable_interrupts(INT_RDA); 
....................  
.................... } 
....................  
.................... int1 TakeGpsGPGGA(void) 
*
00260:  MOV     W5,[W15++]
00262:  MOV     #C,W5
00264:  REPEAT  #3
00266:  MOV     [W5++],[W15++]
.................... { 
....................  
....................      locationFound=0; 
00268:  BCLR.B  11F4.0
....................      valid=false; 
0026A:  BCLR.B  11F4.2
....................      int count=0; 
....................      int1 gprmcbool=false; 
0026C:  CLR     12BE
0026E:  BCLR.B  12C0.0
....................      cntGprMc=0; 
00270:  CLR     12AE
....................      findValue=false; 
00272:  BCLR.B  11F4.3
....................      memset(GprMcArray,'\0',150); 
00274:  MOV     #11F6,W1
00276:  MOV     #0,W2
00278:  REPEAT  #95
0027A:  CLR.B   [W1++]
....................    
....................  
....................      while(!findValue){ 
0027C:  BTSC.B  11F4.3
0027E:  BRA     30C
....................  
....................      for(int i=0;i<495;i++) 
00280:  CLR     12C2
00282:  MOV     12C2,W4
00284:  MOV     #1EF,W3
00286:  CP      W3,W4
00288:  BRA     LE,306
....................      { 
....................                 if(GpsValues[i]=='G' &&GpsValues[i+1]=='P' &&GpsValues[i+2]=='R' && GpsValues[i+3]=='M' && GpsValues[i+4]=='C') 
0028A:  MOV     #1000,W4
0028C:  MOV     12C2,W3
0028E:  ADD     W3,W4,W0
00290:  MOV.B   [W0],W4L
00292:  XOR.B   #47,W4L
00294:  BRA     NZ,300
00296:  MOV     12C2,W4
00298:  ADD     W4,#1,W4
0029A:  MOV     W4,W5
0029C:  MOV     #1000,W4
0029E:  ADD     W5,W4,W0
002A0:  MOV.B   [W0],W4L
002A2:  XOR.B   #50,W4L
002A4:  BRA     NZ,300
002A6:  MOV     12C2,W4
002A8:  ADD     W4,#2,W4
002AA:  MOV     W4,W6
002AC:  MOV     #1000,W4
002AE:  ADD     W6,W4,W0
002B0:  MOV.B   [W0],W4L
002B2:  XOR.B   #52,W4L
002B4:  BRA     NZ,300
002B6:  MOV     12C2,W4
002B8:  ADD     W4,#3,W4
002BA:  MOV     W4,W7
002BC:  MOV     #1000,W4
002BE:  ADD     W7,W4,W0
002C0:  MOV.B   [W0],W4L
002C2:  XOR.B   #4D,W4L
002C4:  BRA     NZ,300
002C6:  MOV     12C2,W4
002C8:  ADD     W4,#4,W4
002CA:  MOV     W4,W8
002CC:  MOV     #1000,W4
002CE:  ADD     W8,W4,W0
002D0:  MOV.B   [W0],W4L
002D2:  XOR.B   #43,W4L
002D4:  BRA     NZ,300
....................                 { 
....................                        gprmc=i+6; 
002D6:  MOV     12C2,W4
002D8:  ADD     W4,#6,W4
002DA:  MOV     W4,12AC
....................  
....................                        while(GpsValues[i] !='\r') 
002DC:  MOV     #1000,W4
002DE:  MOV     12C2,W3
002E0:  ADD     W3,W4,W0
002E2:  MOV.B   [W0],W4L
002E4:  CP.B    W4L,#D
002E6:  BRA     Z,2F8
....................                        { 
....................  
....................                                i++; 
002E8:  INC     12C2
....................                                if(i==500) 
002EA:  MOV     12C2,W4
002EC:  XOR     #1F4,W4
002EE:  BRA     NZ,2F4
....................                                { 
....................                                  return false; 
002F0:  CLR.B   0
002F2:  BRA     394
....................                                } 
002F4:  GOTO    2DC
....................  
....................  
....................                        } 
....................  
....................                         findValue=true; 
002F8:  BSET.B  11F4.3
....................                         gprmcbool=true; 
002FA:  BSET.B  12C0.0
....................                         break; 
002FC:  GOTO    306
....................  
....................                 } 
00300:  INC     12C2
00302:  GOTO    282
....................     } 
....................  
....................      findValue=true; 
00306:  BSET.B  11F4.3
00308:  GOTO    27C
....................  
....................      } 
....................  
....................      count=gprmc; 
0030C:  PUSH    12AC
0030E:  POP     12BE
....................  
....................      if(gprmcbool) 
00310:  BTSS.B  12C0.0
00312:  BRA     336
....................      { 
....................  
....................         while(GpsValues[count] != '\r') 
00314:  MOV     #1000,W4
00316:  MOV     12BE,W3
00318:  ADD     W3,W4,W0
0031A:  MOV.B   [W0],W4L
0031C:  CP.B    W4L,#D
0031E:  BRA     Z,336
....................         { 
....................     
....................            GprMcArray[cntGprMc]=GpsValues[count]; 
00320:  MOV     #11F6,W4
00322:  MOV     12AE,W3
00324:  ADD     W3,W4,W5
00326:  MOV     #1000,W4
00328:  MOV     12BE,W3
0032A:  ADD     W3,W4,W0
0032C:  MOV.B   [W0],[W5]
....................     
....................            ++count; 
0032E:  INC     12BE
....................            ++cntGprMc; 
00330:  INC     12AE
00332:  GOTO    314
....................     
....................         } 
....................      } 
....................  
....................  
....................          int commaCount=0; 
....................          int i=0; 
00336:  CLR     12C4
00338:  CLR     12C6
....................  
....................          while(i<cntGprMc-1) 
0033A:  MOV     12AE,W4
0033C:  SUB     W4,#1,W0
0033E:  MOV     12C6,W4
00340:  CP      W4,W0
00342:  BRA     GE,38E
....................           { 
....................  
....................            if(GprMcArray[i]==',') 
00344:  MOV     #11F6,W4
00346:  MOV     12C6,W3
00348:  ADD     W3,W4,W0
0034A:  MOV.B   [W0],W4L
0034C:  XOR.B   #2C,W4L
0034E:  BRA     NZ,388
....................            { 
....................                 commaCount++; 
00350:  INC     12C4
....................                 i++; 
00352:  INC     12C6
....................  
....................                 if(commaCount==1) 
00354:  MOV     12C4,W4
00356:  CP      W4,#1
00358:  BRA     NZ,384
....................                 { 
....................                    if(GprMcArray[i]=='A') 
0035A:  MOV     #11F6,W4
0035C:  MOV     12C6,W3
0035E:  ADD     W3,W4,W0
00360:  MOV.B   [W0],W4L
00362:  XOR.B   #41,W4L
00364:  BRA     NZ,370
....................                    { 
....................                       valid=true; 
00366:  BSET.B  11F4.2
....................                       break; 
00368:  GOTO    38E
....................  
....................                    } 
0036C:  GOTO    382
....................  
....................                    else if(GprMcArray[i]=='V') 
00370:  MOV     #11F6,W4
00372:  MOV     12C6,W3
00374:  ADD     W3,W4,W0
00376:  MOV.B   [W0],W4L
00378:  XOR.B   #56,W4L
0037A:  BRA     NZ,382
....................                    { 
....................  
....................                       valid=false; 
0037C:  BCLR.B  11F4.2
....................                       break; 
0037E:  GOTO    38E
....................                    } 
....................                    ++i; 
00382:  INC     12C6
....................  
....................                 } 
....................            } 
00384:  GOTO    38A
....................  
....................            else 
....................               i++; 
00388:  INC     12C6
0038A:  GOTO    33A
....................           } 
....................  
....................          return valid; 
0038E:  CLR.B   W0
00390:  BTSC.B  11F4.2
00392:  INC     W0,W0
00394:  MOV     #12,W5
00396:  REPEAT  #3
00398:  MOV     [--W15],[W5--]
0039A:  MOV     [--W15],W5
0039C:  RETURN  
....................  
.................... } 
....................  
....................  
.................... int1 GPSLatitGGA(void) 
0039E:  MOV     W5,[W15++]
003A0:  MOV     W6,[W15++]
003A2:  CLR     12BE
003A4:  CLR     12C0
003A6:  CLR     12C2
.................... { 
....................     
....................     int commaCount=0; 
....................     int i=0; 
....................     int cntLong=0; 
....................     char indicator; 
....................  
....................     while(commaCount<4) 
003A8:  MOV     12BE,W4
003AA:  CP      W4,#4
003AC:  BRA     GE,41E
....................     { 
....................  
....................       if(GprMcArray[i]==',') 
003AE:  MOV     #11F6,W4
003B0:  MOV     12C0,W3
003B2:  ADD     W3,W4,W0
003B4:  MOV.B   [W0],W4L
003B6:  XOR.B   #2C,W4L
003B8:  BRA     NZ,418
....................       { 
....................            commaCount++; 
003BA:  INC     12BE
....................            i++; 
003BC:  INC     12C0
....................  
....................  
....................             if(commaCount==2) 
003BE:  MOV     12BE,W4
003C0:  CP      W4,#2
003C2:  BRA     NZ,3FA
....................             { 
....................  
....................                while(GprMcArray[i] != ',') 
003C4:  MOV     #11F6,W4
003C6:  MOV     12C0,W3
003C8:  ADD     W3,W4,W0
003CA:  MOV.B   [W0],W4L
003CC:  XOR.B   #2C,W4L
003CE:  BRA     Z,3F6
....................                { 
....................                  if(GprMcArray[i] !='.') 
003D0:  MOV     #11F6,W4
003D2:  MOV     12C0,W3
003D4:  ADD     W3,W4,W0
003D6:  MOV.B   [W0],W4L
003D8:  XOR.B   #2E,W4L
003DA:  BRA     Z,3F0
....................                  {  
....................                    latitude[cntLong+1]=GprMcArray[i]; 
003DC:  MOV     12C2,W4
003DE:  ADD     W4,#1,W4
003E0:  MOV     W4,W5
003E2:  MOV     #128C,W4
003E4:  ADD     W5,W4,W6
003E6:  MOV     #11F6,W4
003E8:  MOV     12C0,W3
003EA:  ADD     W3,W4,W0
003EC:  MOV.B   [W0],[W6]
....................                    cntLong++; 
003EE:  INC     12C2
....................                  } 
....................                   
....................                  i++; 
003F0:  INC     12C0
003F2:  GOTO    3C4
....................  
....................                 } 
....................  
....................            } 
003F6:  GOTO    414
....................             
....................            else if(commaCount==3) 
003FA:  MOV     12BE,W4
003FC:  CP      W4,#3
003FE:  BRA     NZ,414
....................            { 
....................                  indicator=  GprMcArray[i]; 
00400:  MOV     #11F6,W4
00402:  MOV     12C0,W3
00404:  ADD     W3,W4,W0
00406:  MOV     12C4,W4
00408:  MOV.B   [W0+#0],W4L
0040A:  MOV     W4,12C4
....................                  latitude[0]=indicator; 
0040C:  MOV.B   12C4,W0L
0040E:  MOV.B   W0L,128C
....................                  break; 
00410:  GOTO    41E
....................             
....................            } 
....................       } 
00414:  GOTO    41A
....................  
....................       else 
....................           i++; 
00418:  INC     12C0
0041A:  GOTO    3A8
....................  
....................     } 
....................  
....................     int1 founded=false; 
0041E:  BCLR.B  12C5.0
....................  
....................     if(cntLong >= 6) 
00420:  MOV     12C2,W4
00422:  CP      W4,#6
00424:  BRA     LT,428
....................     { 
....................        
....................  
....................        founded=true; 
00426:  BSET.B  12C5.0
....................     } 
....................  
....................     if(founded) 
00428:  BTSS.B  12C5.0
0042A:  BRA     432
....................        return 1; 
0042C:  MOV.B   #1,W0L
0042E:  MOV.B   W0L,0
00430:  BRA     434
....................  
....................     return 0; 
00432:  CLR.B   0
00434:  MOV     [--W15],W6
00436:  MOV     [--W15],W5
00438:  RETURN  
....................  
....................    
....................  
.................... } 
....................  
.................... int1 GPSLongitudeGGA(void) 
0043A:  MOV     W5,[W15++]
0043C:  MOV     W6,[W15++]
0043E:  CLR     12BE
00440:  CLR     12C0
00442:  CLR     12C2
.................... { 
....................     
....................     int commaCount=0; 
....................     int i=0; 
....................     int cntLong=0; 
....................     char indicator; 
....................      
....................     while(commaCount<6) 
00444:  MOV     12BE,W4
00446:  CP      W4,#6
00448:  BRA     GE,4BA
....................     { 
....................  
....................       if(GprMcArray[i]==',') 
0044A:  MOV     #11F6,W4
0044C:  MOV     12C0,W3
0044E:  ADD     W3,W4,W0
00450:  MOV.B   [W0],W4L
00452:  XOR.B   #2C,W4L
00454:  BRA     NZ,4B4
....................       { 
....................            commaCount++; 
00456:  INC     12BE
....................            i++; 
00458:  INC     12C0
....................  
....................            if(commaCount==4) 
0045A:  MOV     12BE,W4
0045C:  CP      W4,#4
0045E:  BRA     NZ,496
....................            {           
....................                while(GprMcArray[i] != ',') 
00460:  MOV     #11F6,W4
00462:  MOV     12C0,W3
00464:  ADD     W3,W4,W0
00466:  MOV.B   [W0],W4L
00468:  XOR.B   #2C,W4L
0046A:  BRA     Z,492
....................                { 
....................                   if(GprMcArray[i] !='.') 
0046C:  MOV     #11F6,W4
0046E:  MOV     12C0,W3
00470:  ADD     W3,W4,W0
00472:  MOV.B   [W0],W4L
00474:  XOR.B   #2E,W4L
00476:  BRA     Z,48C
....................                   {   
....................                     longitude[cntLong+1]=GprMcArray[i]; 
00478:  MOV     12C2,W4
0047A:  ADD     W4,#1,W4
0047C:  MOV     W4,W5
0047E:  MOV     #1296,W4
00480:  ADD     W5,W4,W6
00482:  MOV     #11F6,W4
00484:  MOV     12C0,W3
00486:  ADD     W3,W4,W0
00488:  MOV.B   [W0],[W6]
....................                     cntLong++; 
0048A:  INC     12C2
....................                   } 
....................                   i++; 
0048C:  INC     12C0
0048E:  GOTO    460
....................  
....................               } 
....................  
....................            } 
00492:  GOTO    4B0
....................            else if(commaCount==5) 
00496:  MOV     12BE,W4
00498:  CP      W4,#5
0049A:  BRA     NZ,4B0
....................            { 
....................                  indicator=  GprMcArray[i]; 
0049C:  MOV     #11F6,W4
0049E:  MOV     12C0,W3
004A0:  ADD     W3,W4,W0
004A2:  MOV     12C4,W4
004A4:  MOV.B   [W0+#0],W4L
004A6:  MOV     W4,12C4
....................                  longitude[0]=indicator; 
004A8:  MOV.B   12C4,W0L
004AA:  MOV.B   W0L,1296
....................                  break; 
004AC:  GOTO    4BA
....................             
....................            } 
....................       } 
004B0:  GOTO    4B6
....................  
....................       else 
....................           i++; 
004B4:  INC     12C0
004B6:  GOTO    444
....................  
....................     } 
....................      
....................     int1 founded=false; 
004BA:  BCLR.B  12C5.0
....................  
....................     if(cntLong >= 6) 
004BC:  MOV     12C2,W4
004BE:  CP      W4,#6
004C0:  BRA     LT,4C4
....................     { 
....................  
....................        founded=true; 
004C2:  BSET.B  12C5.0
....................     } 
....................  
....................     if(founded) 
004C4:  BTSS.B  12C5.0
004C6:  BRA     4CE
....................        return 1; 
004C8:  MOV.B   #1,W0L
004CA:  MOV.B   W0L,0
004CC:  BRA     4D0
....................  
....................     return 0; 
004CE:  CLR.B   0
004D0:  MOV     [--W15],W6
004D2:  MOV     [--W15],W5
004D4:  RETURN  
....................  
....................    } 
....................  
....................  
....................  
.................... void GpsHoursGGA(void) 
.................... { 
....................  
....................     int i=0; 
....................     int cntLong=0; 
....................  
....................         while(GprMcArray[cntLong] != ',') 
....................        { 
....................  
....................            if(GprMcArray[cntLong] != '.') 
....................                hours[i]=GprMcArray[cntLong]; 
....................  
....................            else 
....................                   hours[i]='0'; 
....................  
....................  
....................           if(cntLong % 2 == 1 && cntLong != 7) 
....................           { 
....................              i++; 
....................              hours[i]=':'; 
....................           } 
....................           i++; 
....................           cntLong++; 
....................  
....................         } 
....................  
....................         for(i=0;i<11;i++) 
....................          { 
....................  
....................             Hours[i]=hours[i]; 
....................  
....................          } 
....................  
....................         Hours[11]='\n'; 
....................  
.................... } 
....................  
....................  
.................... int GpsSatellite(void) 
.................... { 
....................  
....................    
....................     int commaCount=0; 
....................     int i=0; 
....................     int cntLong=0; 
....................  
....................     while(commaCount<7) 
....................     { 
....................  
....................       if(GprMcArray[i]==',') 
....................       { 
....................          commaCount++; 
....................            i++; 
....................  
....................  
....................             if(commaCount==6) 
....................             { 
....................  
....................                while(GprMcArray[i] != ',') 
....................             { 
....................                   satellite[cntLong]=GprMcArray[i]; 
....................  
....................                   cntLong++; 
....................  
....................                   i++; 
....................  
....................             } 
....................                commaCount++; 
....................  
....................  
....................            } 
....................       } 
....................  
....................       else 
....................           i++; 
....................  
....................     } 
....................  
....................     int1 founded=false; 
....................  
....................     if(cntLong == 2) 
....................     { 
....................  
....................        satelliteNum=(int)((satellite[0]-48)*10 + (satellite[1]-48)) ; 
....................                       
....................  
....................        founded=true; 
....................     } 
....................  
....................     if(founded) 
....................        return satelliteNum; 
....................  
....................     return 0; 
....................  
....................  
....................  
.................... } 
....................  
.................... float GpsAltitude(void) 
.................... { 
....................  
....................  
....................    int commaCount=0; 
....................     int i=0; 
....................     int cntLong=0; 
....................  
....................     while(commaCount<9) 
....................    { 
....................  
....................       if(GprMcArray[i]==',') 
....................       { 
....................          commaCount++; 
....................            i++; 
....................  
....................  
....................             if(commaCount==8) 
....................             { 
....................  
....................                while(GprMcArray[i] != ',') 
....................             { 
....................                   altitude[cntLong]=GprMcArray[i]; 
....................  
....................                   cntLong++; 
....................  
....................                   i++; 
....................  
....................             } 
....................                commaCount++; 
....................  
....................  
....................            } 
....................       } 
....................  
....................       else 
....................           i++; 
....................  
....................     } 
....................  
....................     int1 founded=false; 
....................  
....................     if(cntLong == 6) 
....................     { 
....................  
....................        altitudeValue=(float)((altitude[0]-48)*1000 + (altitude[1]-48)*100 + (altitude[2]-48)*10 + (altitude[3]-48) +(float)(altitude[5]-48)/10)  ; 
....................                       
....................  
....................        founded=true; 
....................     } 
....................  
....................     if(founded) 
....................        return altitudeValue; 
....................  
....................     return 0; 
....................  
....................  
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #INT_RDA 
.................... void  rda_isr(void)  
*
00200:  PUSH    42
00202:  PUSH    36
00204:  PUSH    54
00206:  MOV     W0,[W15++]
00208:  MOV     #2,W0
0020A:  REPEAT  #C
0020C:  MOV     [W0++],[W15++]
.................... { 
....................   disable_interrupts(INT_RDA); 
0020E:  BCLR.B  821.3
....................   int32 countCycle=0; 
....................   int16 count=0; 
00210:  CLR     12D0
00212:  CLR     12D2
00214:  CLR     12D4
....................   do 
....................   { 
....................    
....................    if(kbhit(GPS)) 
00216:  BTSS.B  222.0
00218:  BRA     232
....................    { 
....................       GPSValues[count++]=getc(GPS); 
0021A:  MOV     12D4,W0
0021C:  INC     12D4
0021E:  MOV     W0,W5
00220:  MOV     #1000,W4
00222:  ADD     W5,W4,W6
00224:  BTSS.B  222.0
00226:  BRA     224
00228:  MOV     226,W0
0022A:  MOV.B   W0L,[W6]
....................       countCycle++; 
0022C:  INC     12D0
0022E:  BTSC.B  42.1
00230:  INC     12D2
....................    } 
....................    
....................   }while(count<500 && countCycle<64435); 
00232:  MOV     12D4,W4
00234:  MOV     #1F4,W3
00236:  CP      W3,W4
00238:  BRA     LE,24A
0023A:  MOV     12D2,W4
0023C:  CP      W4,#0
0023E:  BRA     LT,216
00240:  BRA     GT,24A
00242:  MOV     12D0,W4
00244:  MOV     #FBB3,W3
00246:  CP      W3,W4
00248:  BRA     GTU,216
....................    
....................   dataCameGPS=1; 
0024A:  BSET.B  11F4.1
....................   enable_interrupts(INT_RDA); 
0024C:  BSET.B  821.3
....................    
0024E:  BCLR.B  801.3
00250:  MOV     #1A,W0
00252:  REPEAT  #C
00254:  MOV     [--W15],[W0--]
00256:  MOV     [--W15],W0
00258:  POP     54
0025A:  POP     36
0025C:  POP     42
0025E:  RETFIE  
.................... } 
....................  
....................  
....................  
.................... void main() 
*
004D6:  MOV     #4444,W0
004D8:  MOV     W0,844
004DA:  BSET.B  8C1.7
004DC:  MOV     #46,W0
004DE:  MOV.B   W0L,742
004E0:  MOV     #57,W0
004E2:  MOV.B   W0L,742
004E4:  BCLR.B  742.6
004E6:  MOV     #4D,W0
004E8:  MOV     W0,6C4
004EA:  MOV     #100,W0
004EC:  MOV     W0,680
004EE:  MOV     #46,W0
004F0:  MOV.B   W0L,742
004F2:  MOV     #57,W0
004F4:  MOV.B   W0L,742
004F6:  BSET.B  742.6
004F8:  MOV     #1,W4
004FA:  MOV     W4,744
004FC:  MOV     #16,W4
004FE:  MOV     W4,746
00500:  DISI    #E
00502:  MOV     #103,W0
00504:  MOV     #743,W1
00506:  MOV     #78,W2
00508:  MOV     #9A,W3
0050A:  MOV.B   W2L,[W1]
0050C:  MOV.B   W3L,[W1]
0050E:  MOV.B   W0L,743
00510:  LSR     W0,#8,W0
00512:  MOV     #742,W1
00514:  MOV     #46,W2
00516:  MOV     #57,W3
00518:  MOV.B   W2L,[W1]
0051A:  MOV.B   W3L,[W1]
0051C:  MOV.B   W0L,[W1]
0051E:  MOV     #8000,W4
00520:  MOV     W4,220
00522:  MOV     #400,W4
00524:  MOV     W4,222
00526:  MOV     #137,W4
00528:  MOV     W4,228
0052A:  BCLR.B  11F4.0
0052C:  BCLR.B  11F4.1
0052E:  CLR     12AC
00530:  CLR     12AE
00532:  CLR     12B0
00534:  CLR     12B2
00536:  CLR     12B4
00538:  BCLR.B  11F4.2
0053A:  BCLR.B  11F4.3
0053C:  CLR     E0E
0053E:  CLR     E1E
00540:  CLR     E2E
00542:  CLR     E3E
00544:  CLR     E4E
00546:  CLR     E5E
00548:  CLR     E6E
0054A:  MOV     #6F80,W15
0054C:  MOV     #6FFF,W0
0054E:  MOV     W0,20
00550:  NOP     
00552:  MOV     #6F80,W15
00554:  MOV     #6FFF,W0
00556:  MOV     W0,20
00558:  NOP     
.................... { 
....................  
....................  
....................    enable_interrupts(INT_RDA); 
0055A:  BSET.B  821.3
....................    enable_interrupts(INTR_GLOBAL); 
0055C:  BSET.B  8C3.7
....................  
....................    while(TRUE) 
....................    { 
....................      if(dataCameGPS) 
0055E:  BTSS.B  11F4.1
00560:  BRA     574
....................      {  
....................        dataCameGPS=0; 
00562:  BCLR.B  11F4.1
....................        if(TakeGpsGPGGA()) 
00564:  CALL    260
00568:  CP0.B   W0L
0056A:  BRA     Z,574
....................        { 
....................           GPSLatitGGA(); 
0056C:  CALL    39E
....................           GPSLongitudeGGA(); 
00570:  CALL    43A
....................               
....................         
....................        } 
....................       
....................      } 
00574:  GOTO    55E
....................    } 
....................  
.................... } 
00578:  PWRSAV  #0

Configuration Fuses:
   Word  3L: 0033   NOWRT NOPROTECT GSSK
          H: FF00  
   Word  4L: 0080   FRC IESO
          H: FF00  
   Word  5L: 0026   HS NOOSCIO IOL1WAY CKSFSM
          H: FF00  
   Word  6L: 007F   WPOSTS16 WPRES128 PLLWAIT WINDIS NOWDT
          H: FF00  
   Word  7L: 0037   PUT128 NOBROWNOUT NOALTI2C1 NOALTI2C2
          H: FF00  
   Word  8L: 00D7   ICSP1 RESET_PRIMARY NOJTAG NODEBUG
          H: FF00  
   Word  9L: 0033   NOAWRT NOAPROTECT APLK
          H: FF00  
