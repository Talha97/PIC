#include<stdarg.h>
int8 buffercounter=0;
int32 lenghtofMem=0;
int32 lenghtofMemImage=0;
void espOn(void)
{
   output_low(PWR_EN);
   output_low(BT_EN);
   output_high(WIFI_RST);
   output_high(WIFI_EN);
   enable_interrupts(INT_RDA2);

   enable_interrupts(INTR_GLOBAL);
   setup_uart(115200,WIFI);     
}

int1 waitAnswer()
{
   
   timeOutWiFi=0;
   while(timeOutWiFi<2)
   {
      if(wifi_data_geldi)
      {
      
        for(int i=0;i<100;i++)
        {
            if(wifi_data[i][0]=='O' && wifi_data[i+1][0]=='K')
             {     
                sound_buzzer(50,150,1);
                
                for(int i=0;i<100;i++) wifi_data[i][0]='\0';
                wifi_data_geldi=0;
                return 1;
             }
        }
      
      }
   }
   wifi_data_geldi=0;
   return 0;
}

void writeATCommand(char *command)
{

     fprintf(WiFi,"%s",command);
     fprintf(WiFi,"%s","\r\n");

}

int1 resetESP()
{       
       sprintf(transienBuffer,"AT+RST");
       writeATCommand(transienBuffer);
       delay_ms(1500);
       return 1;
       
}

int1 connectModule()
{
   transienBuffer="AT";
   writeATCommand(transienBuffer);
  
   return 1;
   
   
}


void selectMode(int selection)
{
   
   sprintf(transienBuffer,"AT+CWMODE=%d",selection);
   writeATCommand(transienBuffer);
       
}
int1 selectUsage(int selection)
{
      sprintf(transienBuffer,"AT+CIPMODE=%d",selection);
      writeATCommand(transienBuffer);
        
      return True;

}

int1 selectMultipleOrSingle(int selection)
{
      sprintf(transienBuffer,"AT+CIPMUX=%d",selection);
      writeATCommand(transienBuffer);
      
      return True;
}

int1 connectWifi(char *username, char *password)
{   
   char connectionBuffer[80];   
   sprintf(connectionBuffer,"AT+CWJAP=\"%s\",\"%s\"\r\n",wifiID,wifiPassword);
   fprintf(WiFi,"%s",connectionBuffer);

   return True;

}


int1 accessPoint()
{
   fprintf(WIFI,"%s","AT+CWSAP=\"");
   fprintf(WIFI,"%s","Armas");
   fprintf(WIFI,"%s","\",\"");   
   fprintf(WIFI,"%s","12345678");
   fprintf(WIFI,"%s","\",6,4\r\n");
    
   return True;
      
}

int1 enableDHCP(int select1,int select2)
{
      sprintf(transienBuffer,"AT+CWDHCP_CUR=%d,%d",select1,select2);
      writeATCommand(transienBuffer);
     
      return True;

}

int1 setSTA()
{

     transienBuffer="AT+CIPSTA=\"192.168.0.80\"";
     writeATCommand(transienBuffer);
     return 1;

}
int1 setTimeout(int timeout)
{

      sprintf(transienBuffer,"AT+CIPSTO=%d",timeout);
      writeATCommand(transienBuffer);
      
      return True;
      
}

int1 queryTimeout()
{

      sprintf(transienBuffer,"AT+CIPSTO?");
      writeATCommand(transienBuffer);
       
      return True;
      
}


int1 serverMode(int selection,int port)
{
      selectMode(3); //1->Station 2->Access Point 3-> Both
      if(!waitAnswer()) return 0;
      
      selectMultipleOrSingle(1);//0->Single 1->Multiple
      if(!waitAnswer()) return 0;
      
      sprintf(transienBuffer,"AT+CIPSERVER=%d,%d",1,1234);
      writeATCommand(transienBuffer);
      if(!waitAnswer()) return 0;
     
      setTimeout(180);
      if(!waitAnswer()) return 0;
         
      return 1;

}

void sendDataNormal(char *buff)
{
      int length=strlen(buff);
      sprintf(transienBuffer,"AT+CIPSEND=%d,%d",0,length);
      writeATCommand(transienBuffer);
      delay_ms(1);
      
      for(int i=0;i<length;i++)
      {
      
         fprintf(WIFI,"%c",buff[i]);
      
      }


}

int1 sendDataviaESP(int8 *message,int ID,int length)
{       
      sprintf(transienBuffer,"AT+CIPSEND=%d,%d",0,length);
      writeATCommand(transienBuffer);
      delay_ms(1);
      if(length==2048)
      {
         for(int i=0;i<4;i++)
         {
           for(int j=0;j<512;j++)
           {
              fprintf(WIFI,"%c",message[512*i+j]);
           
           }
           delay_ms(20);
   
         }
      }
      
      else
      {
           for(int j=0;j<length;j++)
           {
              fprintf(WIFI,"%c",message[j]);
           
           }     
      
      }
              
      return 1;
}


int1 sendOptionviaESP(int8 *buffer,int length)
{
      sprintf(transienBuffer,"AT+CIPSEND=%d,%d",0,length);
      writeATCommand(transienBuffer);
      delay_ms(1);
      for(int i=0;i<length;i++){fprintf(WIFI,"%c",buffer[i]); }
              
      return 1;
}

void nullSend()
{
      sprintf(transienBuffer,"AT+CIPSEND=%d,%d",0,64);
      writeATCommand(transienBuffer);
      delay_ms(1);
      
      for(int i=0;i<64;i++)
      {
         fprintf(WiFi,"%c",131);
      }

}

void StartBytes()
{
      
      int8 passBuffer[64];
      FlashInfo_Read(debugChar,16); 
      
      passBuffer[0]=optionR;
      
      for(int i=0;i<12;i++)  passBuffer[1+i] =ops_field[i];  
      
      for(int i=0;i<5;i++)   passBuffer[13+i]=debugChar[i];
      for(int i=0;i<5;i++)   passBuffer[18+i]=debugChar[i+5];
      for(int i=0;i<5;i++)   passBuffer[23+i]=debugChar[i+10];
      
      passBuffer[28]=eventNumb&0x000000FF;
      passBuffer[29]=(eventNumb&0x0000FF00)>>8;
      passBuffer[30]=(eventNumb&0x00FF0000)>>16;
      passBuffer[31]=124;
       
      lenghtofMem = (mem_block0*64+mem_page0)-10;
      passBuffer[32]=lenghtofMem&0x000000FF;
      passBuffer[33]=(lenghtofMem&0x0000FF00)>>8;
      passBuffer[34]=(lenghtofMem&0x00FF0000)>>16;
        
      
      lenghtofMemImage=mem_block1*64+(mem_page1-10); //-10 olabilir
      passBuffer[35]=lenghtofMemImage&0x000000FF;
      passBuffer[36]=(lenghtofMemImage&0x0000FF00)>>8;
      passBuffer[37]=(lenghtofMemImage&0x00FF0000)>>16;
                  
      passBuffer[38]=photo_numb&0x000000FF;
      passBuffer[39]=(photo_numb&0x0000FF00)>>8;
      passBuffer[40]=(photo_numb&0x00FF0000)>>16; 
      
      passBuffer[41]=user_info_first;
      for(int i=0;i<22;i++)
      {
        passBuffer[42+i]=i;
      }
      
      AESEncryptWiFi(passBuffer,64);
      sendOptionviaESP(debugChar,64);
      

       

}


void sendMemoryviaESP()
{
  
  int sendNumber=(mem_block0*64+mem_page0)-10;
  for(int i=0;i<sendNumber;i++)
  {
        FlashRead(0,0,2048);
        AESEncryptWiFi(memory_Data,2048);
        sendDataviaESP(debugChar,0,2048);
        if(i == sendNumber-1 )
           nullSend();
        
  }
  
  for(int i=0;i<64;i++) debugChar[i]=131;
  sendOptionviaESP(debugChar,64);
  for(int i=0;i<64;i++)
  {
     fprintf(WiFi,"%c",'A');
  }

  
}

void sendImageviaESP()
{
    int sendNumber=(mem_block1*64+mem_page1)-10;
    for(int i=0;i<sendNumber;i++)
    {
        FlashRead(1,0,2048);
        sendDataviaESP(0,0,2048);
        delay_ms(5);
    }
    
}
        
  

int1 setAPIP(char *APIP)
{
   fprintf(WIFI,"%s","AT+CIPAP_CUR=\"");
   fprintf(WIFI,"%s","192.168.1.50");
   fprintf(WIFI,"%s","\"\r\n");
 
   return True;
}

void sendImageMemoryviaESP()
{
   delay_ms(500);
   int1 finishSending=0;
   
   memset(memory_Data,0,2048);  //bu her okumadan once de koyulabilir
   int sendNumber=(mem_block1*64+mem_page1)-10;
   int pageCounter=0;
   while(!finishSending && pageCounter<=sendNumber)
   {
      FlashRead(1,0,2048);
      if((memory_Data[0] ==0xFF && memory_Data[1] ==0xFF &&memory_Data[2] ==0xFF))
         break;      
         
      sendDataviaESP(memory_Data,0,2048);
      pageCounter++;
      
           
   }
     
   for(int i=0;i<64;i++)
   {
     pack[i] = 131; 
   }
     
   sendDataviaESP(pack,0,64);  
   sound_buzzer(2000,250,1);

}

int1 connectESP()
{

   sound_buzzer(500,150,1);
   
   connectModule();
   if(!waitAnswer()) return 0;
   selectMode(3);                //1->Station 2->Access Point 3-> Both
   if(!waitAnswer()) return 0;
   selectMultipleOrSingle(1);    //0->Single 1->Multiple
   if(!waitAnswer()) return 0;    
   accessPoint();
   if(!waitAnswer()) return 0;
   setSTA();
   if(!waitAnswer()) return 0;
   queryTimeout();
   if(!waitAnswer()) return 0;
   if(!serverMode(1,1234)) return 0;

   return 1;
}

void listAll()
{
      transienBuffer="AT+CWLAP";
      writeATCommand(transienBuffer);

}


int1 closeWiFiConnection()
{
    transienBuffer="AT+CWQAP";
    writeATCommand(transienBuffer);
    output_high(PWR_EN);
    output_high(BT_EN);
    output_low(WIFI_RST);
    output_low(WIFI_EN);
    disable_interrupts(INT_RDA2);

    
    setup_uart(0,WIFI);
    if(!waitAnswer()) return False;
    return True;
    
}
